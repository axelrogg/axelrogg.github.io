---
import BaseLayout from "./BaseLayout.astro"
import { readableDate } from "../lib/utils/date.ts";
const { frontmatter } = Astro.props;
---

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        // This handles the copy code block to clipboard action.
        document.querySelectorAll(".copy-button").forEach(button => {
            button.addEventListener("click", () => {
                // Possibly naive property and array element accessing.
                // Should I add checks to this?
                const codeElement = button.parentElement.parentElement.lastElementChild.children[0].children[0]
                const codeContent = codeElement.innerText
                navigator.clipboard.writeText(codeContent)
                    // Modify the following function to add an animation when user clicks to copy code block
                    .then(() => {
                        //button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-check"><circle cx="12" cy="12" r="10"/><path d="m9 12 2 2 4-4"/></svg>`

                        //setTimeout(() => {
                        //    button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="copy-icon"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>`;
                        //}, 2000)
                    })
                    .catch(error => console.error("Copy failed", error))
            })
        })
    })
</script>

<BaseLayout>
    <h1 class="font-bold text-3xl text-center my-3">
        {frontmatter.title}
    </h1>
    <p>
        <span class="font-bold">Published: </span>
        {readableDate(new Date(frontmatter.created_at))}
    </p>
    <p>
        <span class="font-bold">Last edit: </span>
        {readableDate(new Date(frontmatter.last_updated_at))}
    </p>
    <div class="flex flex-row space-x-4 my-3">
        {frontmatter.tags.map((tag: any) =>
            <p class="px-2 py-1 bg-violet-800 rounded-lg">
                {tag}
            </p>
        )}
    </div>
    <slot />
    <div class="mt-10"/>
</BaseLayout>

<style is:inline>
    .katex-display {
        display: flex;
        align-items: center;
        overflow-x: auto;
        max-width: 100%;
        padding-bottom: 0.5rem;
    }
    
    .katex-display > .katex {
        flex-grow: 1;
    }
</style>
